name: GitHub Actions Vercel Deploy

on:
  pull_request:
    branches: [ "main" ]
    types:
      - closed

jobs:
  Test:
    if: github.event.pull_request.merged == true
    uses: GeeTyler/SPEED_CISE_W203_05/.github/workflows/ci.yml@development

  Deploy-Frontend:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    needs: [Test]
    steps:
      - uses: actions/checkout@v3
      - name: Install Vercel CLI
        run: npm install --global vercel@canary
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID_FRONTEND }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_FRONTEND }}
        working-directory: ./frontend
      - name: Build Frontend Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID_FRONTEND }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_FRONTEND }}
        working-directory: ./frontend
      - name: Deploy Frontend Project Artifacts to Vercel
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID_FRONTEND }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_FRONTEND }}
        working-directory: ./frontend

  Deploy-Backend:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    needs: [Test]
    steps:
      - uses: actions/checkout@v3
      - name: Install Vercel CLI
        run: npm install --global vercel@canary
      - name: Install NestJS CLI
        run: npm install @nestjs/cli
        working-directory: ./backend
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID_BACKEND }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_BACKEND }}
        working-directory: ./backend
      - name: Build Backend Project Artifacts
        run: npm run build
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID_BACKEND }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_BACKEND }}
        working-directory: ./backend
      - name: Build Vercel Output
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID_BACKEND }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_BACKEND }}
        working-directory: ./backend
      - name: Deploy Backend Project Artifacts to Vercel
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID_BACKEND }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_BACKEND }}
        working-directory: ./backend