name: GitHub Actions Vercel Deploy Preview

on:
  pull_request:
    branches: [ "development" ]
    types:
      - opened
      - synchronize
      - reopened

jobs:
  Deploy-Backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install Vercel CLI
        run: npm install --global vercel@canary
      - name: Install Nest CLI
        run: npm install --global @nestjs/cli
      - name: Install Backend Dependencies
        run: npm install
        working-directory: ./backend
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID_BACKEND }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_BACKEND }}
        working-directory: ./backend
      - name: Build Backend Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID_BACKEND }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_BACKEND }}
        working-directory: ./backend
      - name: Deploy Backend Project Artifacts to Vercel
        id: deploy_backend
        run: vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID_BACKEND }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_BACKEND }}
        working-directory: ./backend
      - name: Get Backend Preview URL
        id: get_backend_url
        run: |
          BACKEND_URL=$(curl -s -H "Authorization: Bearer ${{ secrets.VERCEL_TOKEN }}" "https://api.vercel.com/v1/deployments?projectId=${{ secrets.VERCEL_PROJECT_ID_BACKEND }}" | jq -r '.deployments[] | select(.state == "READY" and .type == "PREVIEW") | .url' | head -n 1)
          echo "BACKEND_URL=$BACKEND_URL" >> $GITHUB_ENV

  Deploy-Frontend:
    runs-on: ubuntu-latest
    needs: [Deploy-Backend]
    steps:
      - uses: actions/checkout@v3
      - name: Install Vercel CLI
        run: npm install --global vercel@canary
      - name: Install Frontend Dependencies
        run: npm install
        working-directory: ./frontend
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID_FRONTEND }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_FRONTEND }}
        working-directory: ./frontend
      - name: Update Frontend Environment Variable
        run: echo "NEXT_PUBLIC_BACKEND_URL=${{ env.BACKEND_URL }}" > ./frontend/.env
      - name: Build Frontend Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID_FRONTEND }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_FRONTEND }}
        working-directory: ./frontend
      - name: Deploy Frontend Project Artifacts to Vercel
        run: vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID_FRONTEND }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_FRONTEND }}
        working-directory: ./frontend